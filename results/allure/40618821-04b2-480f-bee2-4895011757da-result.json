{"name": "test_open_login_page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: To submit an element, it must be nested inside a form element", "trace": "self = <selenium.webdriver.remote.webelement.WebElement (session=\"bad858b06256fd98b496f0a6773843de\", element=\"f.32633CB2FF8153368E43118F4F3617BB.d.57AC76EF97AC67A352B7FEF656FB1C1F.e.42\")>\n\n    def submit(self):\n        \"\"\"Submits a form.\"\"\"\n        script = (\n            \"/* submitForm */var form = arguments[0];\\n\"\n            'while (form.nodeName != \"FORM\" && form.parentNode) {\\n'\n            \"  form = form.parentNode;\\n\"\n            \"}\\n\"\n            \"if (!form) { throw Error('Unable to find containing form element'); }\\n\"\n            \"if (!form.ownerDocument) { throw Error('Unable to find owning document'); }\\n\"\n            \"var e = form.ownerDocument.createEvent('Event');\\n\"\n            \"e.initEvent('submit', true, true);\\n\"\n            \"if (form.dispatchEvent(e)) { HTMLFormElement.prototype.submit.call(form) }\\n\"\n        )\n    \n        try:\n>           self._parent.execute_script(script, self)\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:407: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000267E8A39D60>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: Unable to find owning docu...dInitThunk [0x75EA7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76F9BE3B+107]\\\\n\\\\tRtlClearBits [0x76F9BDBF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: Unable to find owning document\nE         (Session info: chrome=123.0.6312.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00CF4CC3+225091]\nE       \t(No symbol) [0x00C24E11]\nE       \t(No symbol) [0x00AC9A7A]\nE       \t(No symbol) [0x00ACDEB0]\nE       \t(No symbol) [0x00ACFA76]\nE       \t(No symbol) [0x00B365E2]\nE       \t(No symbol) [0x00B1F55C]\nE       \t(No symbol) [0x00B35CB0]\nE       \t(No symbol) [0x00B1F2F6]\nE       \t(No symbol) [0x00AF79B9]\nE       \t(No symbol) [0x00AF879D]\nE       \tsqlite3_dbdata_init [0x01169A63+4064547]\nE       \tsqlite3_dbdata_init [0x0117106A+4094762]\nE       \tsqlite3_dbdata_init [0x0116B968+4072488]\nE       \tsqlite3_dbdata_init [0x00E6C9C9+930953]\nE       \t(No symbol) [0x00C307E4]\nE       \t(No symbol) [0x00C2AD08]\nE       \t(No symbol) [0x00C2AE31]\nE       \t(No symbol) [0x00C1CAA0]\nE       \tBaseThreadInitThunk [0x75EA7BA9+25]\nE       \tRtlInitializeExceptionChain [0x76F9BE3B+107]\nE       \tRtlClearBits [0x76F9BDBF+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: JavascriptException\n\nThe above exception was the direct cause of the following exception:\n\nself = <PyPi_home_page_test.TestPyPiHomePage object at 0x00000267E8A3AAB0>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"bad858b06256fd98b496f0a6773843de\")>\nlogger = <Logger selenium (DEBUG)>\n\n    @pytest.mark.sanity\n    def test_open_login_page(self, driver, logger):\n        page_login = PageLogin(driver, logger)\n        page_login.open()\n        page_login.type_email_or_phone()\n        page_login.type_password()\n        page_login.click_on_sign_in_button()\n    \n        #this object for linkedin homepage\n        page_home_page = PageHomePage(driver, logger)\n>       page_home_page.type_nrobo_search_field()\n\ntests\\web\\PyPi_home_page_test.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\PageHomePage.py:26: in type_nrobo_search_field\n    self.search.submit()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"bad858b06256fd98b496f0a6773843de\", element=\"f.32633CB2FF8153368E43118F4F3617BB.d.57AC76EF97AC67A352B7FEF656FB1C1F.e.42\")>\n\n    def submit(self):\n        \"\"\"Submits a form.\"\"\"\n        script = (\n            \"/* submitForm */var form = arguments[0];\\n\"\n            'while (form.nodeName != \"FORM\" && form.parentNode) {\\n'\n            \"  form = form.parentNode;\\n\"\n            \"}\\n\"\n            \"if (!form) { throw Error('Unable to find containing form element'); }\\n\"\n            \"if (!form.ownerDocument) { throw Error('Unable to find owning document'); }\\n\"\n            \"var e = form.ownerDocument.createEvent('Event');\\n\"\n            \"e.initEvent('submit', true, true);\\n\"\n            \"if (form.dispatchEvent(e)) { HTMLFormElement.prototype.submit.call(form) }\\n\"\n        )\n    \n        try:\n            self._parent.execute_script(script, self)\n        except JavascriptException as exc:\n>           raise WebDriverException(\"To submit an element, it must be nested inside a form element\") from exc\nE           selenium.common.exceptions.WebDriverException: Message: To submit an element, it must be nested inside a form element\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:113: WebDriverException"}, "attachments": [{"name": "screenshot", "source": "80928595-13a7-4bae-b33d-dcf74c887d9e-attachment.png", "type": "image/png"}, {"name": "log", "source": "328b572b-d9c7-43ef-a6ef-3f8be7c112b0-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "81105c9f-8af1-4759-9b03-2734cdd7c49e-attachment.txt", "type": "text/plain"}], "start": 1711966345141, "stop": 1711966353370, "uuid": "441f94c9-fab9-49d4-a6c9-ed4118343109", "historyId": "071451c7a91a1c5962dabdf4eaf38ac4", "testCaseId": "071451c7a91a1c5962dabdf4eaf38ac4", "fullName": "tests.web.PyPi_home_page_test.TestPyPiHomePage#test_open_login_page", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "PyPi_home_page_test"}, {"name": "subSuite", "value": "TestPyPiHomePage"}, {"name": "host", "value": "Vishalvivek"}, {"name": "thread", "value": "10748-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.PyPi_home_page_test"}]}