{"name": "test_search_nrobo_and_repost_latest_post", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchFrameException: Message: //iframe[contains(@src,'https://client-api.arkoselabs.com/v2/2.4.4/enforcement.f73f1debe050b423e0e5cd1845b2430a.html#3117BF26-4762-4F5A-8ED9-A85E69209A46&ebd7813e-4528-4067-bd6d-cdfee4e988de')]", "trace": "self = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000001E1EE650CE0>\nframe_reference = \"//iframe[contains(@src,'https://client-api.arkoselabs.com/v2/2.4.4/enforcement.f73f1debe050b423e0e5cd1845b2430a.html#3117BF26-4762-4F5A-8ED9-A85E69209A46&ebd7813e-4528-4067-bd6d-cdfee4e988de')]\"\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n>               frame_reference = self._driver.find_element(By.ID, frame_reference)\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E1EC93DD00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75EA7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76F9BE3B+107]\\\\n\\\\tRtlClearBits [0x76F9BDBF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"//iframe[contains(@src,'https://client-api.arkoselabs.com/v2/2.4.4/enforcement.f73f1debe050b423e0e5cd1845b2430a.html#3117BF26-4762-4F5A-8ED9-A85E69209A46&ebd7813e-4528-4067-bd6d-cdfee4e988de')]\"]\"}\nE         (Session info: chrome=123.0.6312.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00CF4CC3+225091]\nE       \t(No symbol) [0x00C24E11]\nE       \t(No symbol) [0x00AC9A7A]\nE       \t(No symbol) [0x00B0175B]\nE       \t(No symbol) [0x00B0188B]\nE       \t(No symbol) [0x00B37882]\nE       \t(No symbol) [0x00B1F5A4]\nE       \t(No symbol) [0x00B35CB0]\nE       \t(No symbol) [0x00B1F2F6]\nE       \t(No symbol) [0x00AF79B9]\nE       \t(No symbol) [0x00AF879D]\nE       \tsqlite3_dbdata_init [0x01169A63+4064547]\nE       \tsqlite3_dbdata_init [0x0117106A+4094762]\nE       \tsqlite3_dbdata_init [0x0116B968+4072488]\nE       \tsqlite3_dbdata_init [0x00E6C9C9+930953]\nE       \t(No symbol) [0x00C307E4]\nE       \t(No symbol) [0x00C2AD08]\nE       \t(No symbol) [0x00C2AE31]\nE       \t(No symbol) [0x00C1CAA0]\nE       \tBaseThreadInitThunk [0x75EA7BA9+25]\nE       \tRtlInitializeExceptionChain [0x76F9BE3B+107]\nE       \tRtlClearBits [0x76F9BDBF+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000001E1EE650CE0>\nframe_reference = \"//iframe[contains(@src,'https://client-api.arkoselabs.com/v2/2.4.4/enforcement.f73f1debe050b423e0e5cd1845b2430a.html#3117BF26-4762-4F5A-8ED9-A85E69209A46&ebd7813e-4528-4067-bd6d-cdfee4e988de')]\"\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n>                   frame_reference = self._driver.find_element(By.NAME, frame_reference)\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E1EC93DD00>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75EA7BA9+25]\\\\n\\\\tRtlInitializeExceptionChain [0x76F9BE3B+107]\\\\n\\\\tRtlClearBits [0x76F9BDBF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[name=\"//iframe[contains(@src,'https://client-api.arkoselabs.com/v2/2.4.4/enforcement.f73f1debe050b423e0e5cd1845b2430a.html#3117BF26-4762-4F5A-8ED9-A85E69209A46&ebd7813e-4528-4067-bd6d-cdfee4e988de')]\"]\"}\nE         (Session info: chrome=123.0.6312.86); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00CF4CC3+225091]\nE       \t(No symbol) [0x00C24E11]\nE       \t(No symbol) [0x00AC9A7A]\nE       \t(No symbol) [0x00B0175B]\nE       \t(No symbol) [0x00B0188B]\nE       \t(No symbol) [0x00B37882]\nE       \t(No symbol) [0x00B1F5A4]\nE       \t(No symbol) [0x00B35CB0]\nE       \t(No symbol) [0x00B1F2F6]\nE       \t(No symbol) [0x00AF79B9]\nE       \t(No symbol) [0x00AF879D]\nE       \tsqlite3_dbdata_init [0x01169A63+4064547]\nE       \tsqlite3_dbdata_init [0x0117106A+4094762]\nE       \tsqlite3_dbdata_init [0x0116B968+4072488]\nE       \tsqlite3_dbdata_init [0x00E6C9C9+930953]\nE       \t(No symbol) [0x00C307E4]\nE       \t(No symbol) [0x00C2AD08]\nE       \t(No symbol) [0x00C2AE31]\nE       \t(No symbol) [0x00C1CAA0]\nE       \tBaseThreadInitThunk [0x75EA7BA9+25]\nE       \tRtlInitializeExceptionChain [0x76F9BE3B+107]\nE       \tRtlClearBits [0x76F9BDBF+191]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nThe above exception was the direct cause of the following exception:\n\nself = <PyPi_home_page_test.TestPyPiHomePage object at 0x000001E1EE57F590>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"98140327f102207e427f157bc7d98116\")>\nlogger = <Logger selenium (DEBUG)>\n\n    @pytest.mark.sanity\n    def test_search_nrobo_and_repost_latest_post(self, driver, logger):\n        page_login = PageLogin(driver, logger)\n        page_login.open()\n        page_login.type_email_or_phone()\n        page_login.type_password()\n        page_login.click_on_sign_in_button()\n>       page_login.click_on_verify_button()\n\ntests\\web\\PyPi_home_page_test.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\Linkedin\\PageLogin.py:60: in click_on_verify_button\n    self.frame(\"//iframe[contains(@src,'https://client-api.arkoselabs.com/v2/2.4.4/enforcement.f73f1debe050b423e0e5cd1845b2430a.html#3117BF26-4762-4F5A-8ED9-A85E69209A46&ebd7813e-4528-4067-bd6d-cdfee4e988de')]\")\n.venv\\Lib\\site-packages\\nrobo\\selenese\\__init__.py:315: in frame\n    return self.driver.switch_to.frame(frame_reference)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.switch_to.SwitchTo object at 0x000001E1EE650CE0>\nframe_reference = \"//iframe[contains(@src,'https://client-api.arkoselabs.com/v2/2.4.4/enforcement.f73f1debe050b423e0e5cd1845b2430a.html#3117BF26-4762-4F5A-8ED9-A85E69209A46&ebd7813e-4528-4067-bd6d-cdfee4e988de')]\"\n\n    def frame(self, frame_reference: Union[str, int, WebElement]) -> None:\n        \"\"\"Switches focus to the specified frame, by index, name, or\n        webelement.\n    \n        :Args:\n         - frame_reference: The name of the window to switch to, an integer representing the index,\n                            or a webelement that is an (i)frame to switch to.\n    \n        :Usage:\n            ::\n    \n                driver.switch_to.frame('frame_name')\n                driver.switch_to.frame(1)\n                driver.switch_to.frame(driver.find_elements(By.TAG_NAME, \"iframe\")[0])\n        \"\"\"\n        if isinstance(frame_reference, str):\n            try:\n                frame_reference = self._driver.find_element(By.ID, frame_reference)\n            except NoSuchElementException:\n                try:\n                    frame_reference = self._driver.find_element(By.NAME, frame_reference)\n                except NoSuchElementException as exc:\n>                   raise NoSuchFrameException(frame_reference) from exc\nE                   selenium.common.exceptions.NoSuchFrameException: Message: //iframe[contains(@src,'https://client-api.arkoselabs.com/v2/2.4.4/enforcement.f73f1debe050b423e0e5cd1845b2430a.html#3117BF26-4762-4F5A-8ED9-A85E69209A46&ebd7813e-4528-4067-bd6d-cdfee4e988de')]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\switch_to.py:93: NoSuchFrameException"}, "attachments": [{"name": "screenshot", "source": "2ef9c0d4-51d3-4810-997e-3ff7e28cd4ae-attachment.png", "type": "image/png"}, {"name": "log", "source": "8d5ff309-b618-4bd0-9969-7fb23a6b5520-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "58068ebd-b79b-45f2-80bf-f91b6a69cce5-attachment.txt", "type": "text/plain"}], "start": 1711983336681, "stop": 1711983347875, "uuid": "cdcd9016-dd74-4d1c-bc69-817672ea4cbf", "historyId": "06aea0d015cc2477c8aee7bda37d6e4b", "testCaseId": "06aea0d015cc2477c8aee7bda37d6e4b", "fullName": "tests.web.PyPi_home_page_test.TestPyPiHomePage#test_search_nrobo_and_repost_latest_post", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "tests.web"}, {"name": "suite", "value": "PyPi_home_page_test"}, {"name": "subSuite", "value": "TestPyPiHomePage"}, {"name": "host", "value": "Vishalvivek"}, {"name": "thread", "value": "27140-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.web.PyPi_home_page_test"}]}